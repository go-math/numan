package spline

import (
	"math"
	"math/rand"
	"testing"

	"github.com/ready-steady/support/assert"
)

func TestCubicCompute1D2P(t *testing.T) {
	x := []float64{0, 1}
	y := []float64{math.E, math.Pi}
	xnew := []float64{0.42, 0.69}
	ynew := []float64{2.8960723750139596e+00, 3.0103662977992611e+00}

	cubic := NewCubic(x, y)
	assert.EqualWithin(cubic.Evaluate(xnew), ynew, 1e-15, t)
}

func TestCubicCompute1D3P(t *testing.T) {
	x := []float64{0, 0.5, 1}
	y := []float64{math.Sqrt2, math.E, math.Pi}
	xnew := []float64{0.42, 0.69}
	ynew := []float64{2.5688178059174831e+00, 2.9828931685532520e+00}

	cubic := NewCubic(x, y)
	assert.EqualWithin(cubic.Evaluate(xnew), ynew, 1e-15, t)
}

func TestCubicCompute1DNP(t *testing.T) {
	x := []float64{
		0.0000000000000000e+00, 1.1437481734488664e-03, 9.2338594768797799e-01,
		1.4675589081711304e+00, 1.8626021137767090e+00, 3.0233257263183977e+00,
		3.4556072704304777e+00, 3.9676747423066994e+00, 4.1702200470257402e+00,
		7.2032449344215808e+00, 1.0000000000000000e+01,
	}
	y := []float64{
		+0.0000000000000000e+00, +1.1437479240813029e-03, +7.9764833083614695e-01,
		+9.9467574902552525e-01, +9.5772594463550653e-01, +1.1799141879849682e-01,
		-3.0887942222671910e-01, -7.3528161089273525e-01, -8.5659153808816091e-01,
		+7.9563774200708559e-01, -5.4402111088936977e-01,
	}
	xnew := []float64{
		0.00, 0.25, 0.50, 0.75, 1.00, 1.25, 1.50, 1.75, 2.00, 2.25, 2.50, 2.75,
		3.00, 3.25, 3.50, 3.75, 4.00, 4.25, 4.50, 4.75, 5.00, 5.25, 5.50, 5.75,
		6.00, 6.25, 6.50, 6.75, 7.00, 7.25, 7.50, 7.75, 8.00, 8.25, 8.50, 8.75,
		9.00, 9.25, 9.50, 9.75, 10.0,
	}
	ynew := []float64{
		+0.0000000000000000e+00, +2.4690807942236367e-01, +4.7853327274582730e-01,
		+6.8123828460142677e-01, +8.4142829749628667e-01, +9.4862969009815490e-01,
		+9.9756959983731153e-01, +9.8437060594849002e-01, +9.0796158450551812e-01,
		+7.7404796421961741e-01, +5.9392400983956195e-01, +3.7907412987558398e-01,
		+1.4098273283791607e-01, -1.0797433132881847e-01, -3.5070479878909072e-01,
		-5.7078888211247758e-01, -7.5709800074993039e-01, -8.9209398472794388e-01,
		-9.5591803348362747e-01, -9.5427230100197313e-01, -8.9548418912252159e-01,
		-7.8788109968481423e-01, -6.3979043452839190e-01, -4.5953959549279583e-01,
		-2.5545598441756712e-01, -3.5867003142246556e-02, +1.9089994649362463e-01,
		+4.1651746265050493e-01, +6.3265814348885396e-01, +8.3099458716913033e-01,
		+1.0031993918517930e+00, +1.1409451556973009e+00, +1.2359044768661129e+00,
		+1.2797499535186880e+00, +1.2641541838154851e+00, +1.1807897659169631e+00,
		+1.0213292979835813e+00, +7.7744537817579795e-01, +4.4081060465407224e-01,
		+3.0975755788633652e-03, -5.4402111088936989e-01,
	}

	cubic := NewCubic(x, y)
	assert.EqualWithin(cubic.Evaluate(xnew), ynew, 1e-15, t)
}

func TestCubicCompute2D2P(t *testing.T) {
	x := []float64{0, 1}
	y := []float64{
		math.E, math.Pi,
		math.SqrtE, math.SqrtPi,
	}
	xnew := []float64{0.42, 0.69}
	ynew := []float64{
		2.2690663942003004e+00, 2.5665543564623965e+00,
		1.9802850436053925e+00, 2.1968868797376420e+00,
	}

	cubic := NewCubic(x, y)
	assert.EqualWithin(cubic.Evaluate(xnew), ynew, 1e-15, t)
}

func TestCubicCompute2D3P(t *testing.T) {
	x := []float64{0, 0.5, 1}
	y := []float64{
		math.E * math.E, math.Pi * math.Pi,
		math.E, math.Pi,
		math.SqrtE, math.SqrtPi,
	}
	xnew := []float64{0.42, 0.69}
	ynew := []float64{
		3.2236041502402095e+00, 3.8579582712981360e+00,
		1.8876258411531017e+00, 1.9900446756705259e+00,
	}

	cubic := NewCubic(x, y)
	assert.EqualWithin(cubic.Evaluate(xnew), ynew, 2e-15, t)
}

func TestCubicCompute2DNP(t *testing.T) {
	x := []float64{
		0.0000000000000000e+00, 2.5926231827891333e-01, 2.0464863403784248e+00,
		2.9965467367452314e+00, 3.3033482100387412e+00, 4.2036780208748903e+00,
		4.3532239261827685e+00, 4.3599490214200376e+00, 5.4966247787870914e+00,
		6.1927096635066370e+00, 1.0000000000000000e+01,
	}
	y := []float64{
		+0.0000000000000000e+00, +1.0000000000000000e+00,
		+2.5636759378618551e-01, +9.6657935879899759e-01,
		+8.8897694020292739e-01, -4.5795196231421570e-01,
		+1.4453786454706261e-01, -9.8949927019284611e-01,
		-1.6105109344033075e-01, -9.8694607010802460e-01,
		-8.7337306262199255e-01, -4.8705183860271084e-01,
		-9.3619062731164815e-01, -3.5149268745426665e-01,
		-9.3853326086902733e-01, -3.4518881534973028e-01,
		-7.0792821948843943e-01, +7.0628438751817813e-01,
		-9.0352257629240706e-02, +9.9590987018971722e-01,
		-5.4402111088936977e-01, -8.3907152907645244e-01,
	}
	xnew := []float64{
		0.00, 0.25, 0.50, 0.75, 1.00, 1.25, 1.50, 1.75, 2.00, 2.25, 2.50, 2.75,
		3.00, 3.25, 3.50, 3.75, 4.00, 4.25, 4.50, 4.75, 5.00, 5.25, 5.50, 5.75,
		6.00, 6.25, 6.50, 6.75, 7.00, 7.25, 7.50, 7.75, 8.00, 8.25, 8.50, 8.75,
		9.00, 9.25, 9.50, 9.75, 10.0,
	}
	ynew := []float64{
		+0.0000000000000000e+00, +1.0000000000000000e+00,
		+2.4767575527024563e-01, +9.6911629486247874e-01,
		+4.6832060624620420e-01, +8.6998252533360210e-01,
		+6.5627137130245250e-01, +7.1582648746959088e-01,
		+8.0586486881356723e-01, +5.1987597732666602e-01,
		+9.1143791715412514e-01, +2.9535879096104845e-01,
		+9.6732733469870347e-01, +5.5502724428959094e-02,
		+9.6786993982187841e-01, -1.8646442621338088e-01,
		+9.0740255089822708e-01, -4.1731486490975100e-01,
		+7.8219626134512710e-01, -6.2406414506613495e-01,
		+6.0218974017268834e-01, -7.9544732589639966e-01,
		+3.8321014164003353e-01, -9.2094029182636017e-01,
		+1.4110767207028516e-01, -9.9002183315298653e-01,
		-1.0834707065274471e-01, -9.9441867079780843e-01,
		-3.4990313623342284e-01, -9.3496121123648601e-01,
		-5.7003532905927012e-01, -8.1822902476036863e-01,
		-7.5598735190108013e-01, -6.5251399447898772e-01,
		-8.9502097432892147e-01, -4.4613280488928886e-01,
		-9.7640706611436612e-01, -2.1052575476956956e-01,
		-9.9406359826036772e-01, +3.9128916346253151e-02,
		-9.5169036279232710e-01, +2.8655718949004799e-01,
		-8.5397583511322206e-01, +5.1522217629584444e-01,
		-7.0560849307874718e-01, +7.0858699675899528e-01,
		-5.1231441243099596e-01, +8.5365194632692720e-01,
		-2.8380535255444928e-01, +9.5100453233751769e-01,
		-3.0749938316111856e-02, +1.0044942204846576e+00,
		+2.3618320541701160e-01, +1.0179704764622379e+00,
		+5.0632545377791638e-01, +9.9528276596414966e-01,
		+7.6900818189959774e-01, +9.4028055468428373e-01,
		+1.0135627649150512e+00, +8.5681330831653102e-01,
		+1.2293205779572713e+00, +7.4873049255478263e-01,
		+1.4056129961592543e+00, +6.1988157309292957e-01,
		+1.5317713946539948e+00, +4.7411601562486261e-01,
		+1.5971271485744882e+00, +3.1528328584447285e-01,
		+1.5910116330537298e+00, +1.4723284944565129e-01,
		+1.5027562232247154e+00, -2.6185827877711287e-02,
		+1.3216922942204392e+00, -2.0112328043172367e-01,
		+1.0371512211738980e+00, -3.7373004252249509e-01,
		+6.3846437921808585e-01, -5.4015664845613409e-01,
		+1.1496314348599840e-01, -6.9655363253875036e-01,
		-5.4402111088936955e-01, -8.3907152907645266e-01,
	}

	cubic := NewCubic(x, y)
	assert.EqualWithin(cubic.Evaluate(xnew), ynew, 2e-15, t)
}

func BenchmarkNewCubic1D(b *testing.B)      { benchmarkNewCubic(10000, 1, b) }
func BenchmarkNewCubic10D(b *testing.B)     { benchmarkNewCubic(10000, 10, b) }
func BenchmarkCubicCompute1D(b *testing.B)  { benchmarkCubicCompute(10000, 1, 10000, b) }
func BenchmarkCubicCompute10D(b *testing.B) { benchmarkCubicCompute(10000, 10, 10000, b) }

func benchmarkNewCubic(nn, nd int, b *testing.B) {
	x, y := sequence(nn), random(nn*nd)

	b.ResetTimer()

	for i := 0; i < b.N; i++ {
		NewCubic(x, y)
	}
}

func benchmarkCubicCompute(nn, nd, np int, b *testing.B) {
	x, y, xnew := sequence(nn), random(nn*nd), sequence(np)
	cubic := NewCubic(x, y)

	b.ResetTimer()

	for i := 0; i < b.N; i++ {
		cubic.Evaluate(xnew)
	}
}

func sequence(n int) []float64 {
	x := make([]float64, n)
	for i := range x {
		x[i] = float64(i) / float64(n)
	}
	return x
}

func random(n int) []float64 {
	x := make([]float64, n)
	for i := range x {
		x[i] = rand.Float64()
	}
	return x
}
