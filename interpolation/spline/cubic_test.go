package spline

import (
	"math"
	"testing"

	"github.com/ready-steady/support/assert"
)

func TestCubicCompute2(t *testing.T) {
	x, y := []float64{0, 1}, []float64{math.E, math.Pi}
	xnew := []float64{0.42, 0.69}
	ynew := []float64{2.8960723750139596e+00, 3.0103662977992611e+00}

	cubic := NewCubic(x, y)
	assert.EqualWithin(cubic.Compute(xnew), ynew, 1e-15, t)
}

func TestCubicCompute3(t *testing.T) {
	x, y := []float64{0, 0.5, 1}, []float64{math.Sqrt2, math.E, math.Pi}
	xnew := []float64{0.42, 0.69}
	ynew := []float64{2.5688178059174831e+00, 2.9828931685532520e+00}

	cubic := NewCubic(x, y)
	assert.EqualWithin(cubic.Compute(xnew), ynew, 1e-15, t)
}

func TestCubicCompute(t *testing.T) {
	x := []float64{
		0.0000000000000000e+00, 1.1437481734488664e-03, 9.2338594768797799e-01,
		1.4675589081711304e+00, 1.8626021137767090e+00, 3.0233257263183977e+00,
		3.4556072704304777e+00, 3.9676747423066994e+00, 4.1702200470257402e+00,
		7.2032449344215808e+00, 1.0000000000000000e+01,
	}
	y := []float64{
		+0.0000000000000000e+00, +1.1437479240813029e-03, +7.9764833083614695e-01,
		+9.9467574902552525e-01, +9.5772594463550653e-01, +1.1799141879849682e-01,
		-3.0887942222671910e-01, -7.3528161089273525e-01, -8.5659153808816091e-01,
		+7.9563774200708559e-01, -5.4402111088936977e-01,
	}
	xnew := []float64{
		0.00, 0.25, 0.50, 0.75, 1.00, 1.25, 1.50, 1.75, 2.00, 2.25, 2.50, 2.75,
		3.00, 3.25, 3.50, 3.75, 4.00, 4.25, 4.50, 4.75, 5.00, 5.25, 5.50, 5.75,
		6.00, 6.25, 6.50, 6.75, 7.00, 7.25, 7.50, 7.75, 8.00, 8.25, 8.50, 8.75,
		9.00, 9.25, 9.50, 9.75, 10.0,
	}
	ynew := []float64{
		+0.0000000000000000e+00, +2.4690807942236367e-01, +4.7853327274582730e-01,
		+6.8123828460142677e-01, +8.4142829749628667e-01, +9.4862969009815490e-01,
		+9.9756959983731153e-01, +9.8437060594849002e-01, +9.0796158450551812e-01,
		+7.7404796421961741e-01, +5.9392400983956195e-01, +3.7907412987558398e-01,
		+1.4098273283791607e-01, -1.0797433132881847e-01, -3.5070479878909072e-01,
		-5.7078888211247758e-01, -7.5709800074993039e-01, -8.9209398472794388e-01,
		-9.5591803348362747e-01, -9.5427230100197313e-01, -8.9548418912252159e-01,
		-7.8788109968481423e-01, -6.3979043452839190e-01, -4.5953959549279583e-01,
		-2.5545598441756712e-01, -3.5867003142246556e-02, +1.9089994649362463e-01,
		+4.1651746265050493e-01, +6.3265814348885396e-01, +8.3099458716913033e-01,
		+1.0031993918517930e+00, +1.1409451556973009e+00, +1.2359044768661129e+00,
		+1.2797499535186880e+00, +1.2641541838154851e+00, +1.1807897659169631e+00,
		+1.0213292979835813e+00, +7.7744537817579795e-01, +4.4081060465407224e-01,
		+3.0975755788633652e-03, -5.4402111088936989e-01,
	}

	cubic := NewCubic(x, y)
	assert.EqualWithin(cubic.Compute(xnew), ynew, 1e-15, t)
}
