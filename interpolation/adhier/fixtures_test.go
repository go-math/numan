package adhier

import (
	"math"
)

type fixture struct {
	surrogate *Surrogate
	levels    []uint32
	orders    []uint32
	points    []float64
	values    []float64
}

func (f *fixture) prepare() {
	if len(f.surrogate.indices) > 0 {
		return
	}

	f.surrogate.indices = make([]uint64, len(f.levels))
	for i := range f.levels {
		f.surrogate.indices[i] = uint64(f.levels[i]) | uint64(f.orders[i])<<32
	}
}

func step(x []float64, _ []uint64) []float64 {
	y := make([]float64, len(x))
	for i := range x {
		if x[i] <= 0.5 {
			y[i] = 1
		}
	}
	return y
}

var fixtureStep = fixture{
	surrogate: &Surrogate{
		level: 4,

		ic: 1,
		oc: 1,
		nc: 8,

		surpluses: []float64{1, 0, -1, -0.5, -0.5, 0, -0.5, 0},
	},
	levels: []uint32{0, 1, 1, 2, 3, 3, 4, 4},
	orders: []uint32{0, 0, 2, 3, 5, 7, 9, 11},
	points: []float64{0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1},
	values: []float64{1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0},
}

func cube(x []float64, _ []uint64) []float64 {
	nc := uint16(len(x)) / 2
	y := make([]float64, nc)

	for i := uint16(0); i < nc; i++ {
		if math.Abs(2*x[2*i]-1) < 0.45 && math.Abs(2*x[2*i+1]-1) < 0.45 {
			y[i] = 1
		}
	}

	return y
}

var fixtureCube = fixture{
	surrogate: &Surrogate{
		level: 3,

		ic: 2,
		oc: 1,
		nc: 29,

		surpluses: []float64{
			1, -1, -1, -1, -1, -0.5, 1, 1, -0.5, 1, 1, -0.5, -0.5, 0, 0.5,
			0.5, 0.5, 0.5, 0.5, 0.5, 0, 0.5, 0.5, 0.5, 0.5, 0, 0.5, 0.5, 0,
		},
	},

	levels: []uint32{
		0, 0,
		1, 0,
		1, 0,
		0, 1,
		0, 1,
		2, 0,
		1, 1,
		1, 1,
		2, 0,
		1, 1,
		1, 1,
		0, 2,
		0, 2,
		3, 0,
		3, 0,
		2, 1,
		2, 1,
		1, 2,
		1, 2,
		3, 0,
		3, 0,
		2, 1,
		2, 1,
		1, 2,
		1, 2,
		0, 3,
		0, 3,
		0, 3,
		0, 3,
	},

	orders: []uint32{
		0, 0,
		0, 0,
		2, 0,
		0, 0,
		0, 2,
		1, 0,
		0, 0,
		0, 2,
		3, 0,
		2, 0,
		2, 2,
		0, 1,
		0, 3,
		1, 0,
		3, 0,
		1, 0,
		1, 2,
		0, 1,
		0, 3,
		5, 0,
		7, 0,
		3, 0,
		3, 2,
		2, 1,
		2, 3,
		0, 1,
		0, 3,
		0, 5,
		0, 7,
	},
}

func hat(x []float64, _ []uint64) []float64 {
	y := make([]float64, len(x))
	for i, z := range x {
		z = 5*z - 1
		switch {
		case 0 <= z && z < 1:
			y[i] = 0.5 * z * z
		case 1 <= z && z < 2:
			y[i] = 0.5 * (-2*z*z + 6*z - 3)
		case 2 <= z && z < 3:
			y[i] = 0.5 * (3 - z) * (3 - z)
		}
	}
	return y
}

func box(x []float64, _ []uint64) []float64 {
	nc := len(x) / 2
	y := make([]float64, 3*nc)

	for i := 0; i < nc; i++ {
		x1, x2 := x[2*i+0], x[2*i+1]

		if x1+x2 > 0.5 {
			y[3*i+0] = 1
		}

		if x1-x2 > 0.5 {
			y[3*i+1] = 1
		}

		if x2-x1 > 0.5 {
			y[3*i+2] = 1
		}
	}

	return y
}

var fixtureBox = fixture{
	surrogate: &Surrogate{
		level: 3,

		ic: 2,
		oc: 3,
		nc: 20,

		surpluses: []float64{
			// Love go fmt!
			+1.0, 0.0, 0.0,
			-1.0, 0.0, 0.0,
			+0.0, 0.0, 0.0,
			-1.0, 0.0, 0.0,
			+0.0, 0.0, 0.0,
			+0.5, 0.0, 0.0,
			+1.0, 0.0, 0.0,
			+1.0, 0.0, 1.0,
			+1.0, 1.0, 0.0,
			+0.5, 0.0, 0.0,
			+0.5, 0.0, 0.0,
			+0.0, 0.0, 0.0,
			-0.5, 0.0, 0.0,
			-0.5, 0.0, 0.5,
			-0.5, 0.0, 0.0,
			+0.5, 0.0, 0.5,
			+0.5, 0.5, 0.0,
			-0.5, 0.5, 0.0,
			+0.5, 0.0, 0.0,
			+0.0, 0.0, 0.0,
		},
	},

	levels: []uint32{
		0, 0,
		1, 0,
		1, 0,
		0, 1,
		0, 1,
		2, 0,
		1, 1,
		1, 1,
		1, 1,
		0, 2,
		3, 0,
		3, 0,
		2, 1,
		2, 1,
		1, 2,
		1, 2,
		2, 1,
		1, 2,
		0, 3,
		0, 3,
	},

	orders: []uint32{
		0, 0,
		0, 0,
		2, 0,
		0, 0,
		0, 2,
		1, 0,
		0, 0,
		0, 2,
		2, 0,
		0, 1,
		1, 0,
		3, 0,
		1, 0,
		1, 2,
		0, 1,
		0, 3,
		3, 0,
		2, 1,
		0, 1,
		0, 3,
	},

	points: []float64{
		0.0, 0.0,
		0.0, 0.1,
		0.0, 0.2,
		0.0, 0.3,
		0.0, 0.4,
		0.0, 0.5,
		0.0, 0.6,
		0.0, 0.7,
		0.0, 0.8,
		0.0, 0.9,
		0.0, 1.0,
		0.1, 0.0,
		0.1, 0.1,
		0.1, 0.2,
		0.1, 0.3,
		0.1, 0.4,
		0.1, 0.5,
		0.1, 0.6,
		0.1, 0.7,
		0.1, 0.8,
		0.1, 0.9,
		0.1, 1.0,
		0.2, 0.0,
		0.2, 0.1,
		0.2, 0.2,
		0.2, 0.3,
		0.2, 0.4,
		0.2, 0.5,
		0.2, 0.6,
		0.2, 0.7,
		0.2, 0.8,
		0.2, 0.9,
		0.2, 1.0,
		0.3, 0.0,
		0.3, 0.1,
		0.3, 0.2,
		0.3, 0.3,
		0.3, 0.4,
		0.3, 0.5,
		0.3, 0.6,
		0.3, 0.7,
		0.3, 0.8,
		0.3, 0.9,
		0.3, 1.0,
		0.4, 0.0,
		0.4, 0.1,
		0.4, 0.2,
		0.4, 0.3,
		0.4, 0.4,
		0.4, 0.5,
		0.4, 0.6,
		0.4, 0.7,
		0.4, 0.8,
		0.4, 0.9,
		0.4, 1.0,
		0.5, 0.0,
		0.5, 0.1,
		0.5, 0.2,
		0.5, 0.3,
		0.5, 0.4,
		0.5, 0.5,
		0.5, 0.6,
		0.5, 0.7,
		0.5, 0.8,
		0.5, 0.9,
		0.5, 1.0,
		0.6, 0.0,
		0.6, 0.1,
		0.6, 0.2,
		0.6, 0.3,
		0.6, 0.4,
		0.6, 0.5,
		0.6, 0.6,
		0.6, 0.7,
		0.6, 0.8,
		0.6, 0.9,
		0.6, 1.0,
		0.7, 0.0,
		0.7, 0.1,
		0.7, 0.2,
		0.7, 0.3,
		0.7, 0.4,
		0.7, 0.5,
		0.7, 0.6,
		0.7, 0.7,
		0.7, 0.8,
		0.7, 0.9,
		0.7, 1.0,
		0.8, 0.0,
		0.8, 0.1,
		0.8, 0.2,
		0.8, 0.3,
		0.8, 0.4,
		0.8, 0.5,
		0.8, 0.6,
		0.8, 0.7,
		0.8, 0.8,
		0.8, 0.9,
		0.8, 1.0,
		0.9, 0.0,
		0.9, 0.1,
		0.9, 0.2,
		0.9, 0.3,
		0.9, 0.4,
		0.9, 0.5,
		0.9, 0.6,
		0.9, 0.7,
		0.9, 0.8,
		0.9, 0.9,
		0.9, 1.0,
		1.0, 0.0,
		1.0, 0.1,
		1.0, 0.2,
		1.0, 0.3,
		1.0, 0.4,
		1.0, 0.5,
		1.0, 0.6,
		1.0, 0.7,
		1.0, 0.8,
		1.0, 0.9,
		1.0, 1.0,
	},

	values: []float64{
		0.00, 0.00, 0.00,
		0.40, 0.00, 0.00,
		0.20, 0.00, 0.00,
		0.00, 0.00, 0.00,
		0.00, 0.00, 0.00,
		0.00, 0.00, 0.00,
		0.40, 0.00, 0.40,
		0.80, 0.00, 0.80,
		1.00, 0.00, 1.00,
		1.00, 0.00, 1.00,
		1.00, 0.00, 1.00,
		0.40, 0.00, 0.00,
		0.92, 0.00, 0.00,
		0.84, 0.00, 0.00,
		0.72, 0.00, 0.00,
		0.76, 0.00, 0.00,
		0.80, 0.00, 0.00,
		1.08, 0.00, 0.36,
		1.36, 0.00, 0.72,
		1.48, 0.00, 0.92,
		1.44, 0.00, 0.96,
		1.40, 0.00, 1.00,
		0.20, 0.00, 0.00,
		0.84, 0.00, 0.00,
		0.88, 0.00, 0.00,
		0.84, 0.00, 0.00,
		0.92, 0.00, 0.00,
		1.00, 0.00, 0.00,
		1.16, 0.00, 0.32,
		1.32, 0.00, 0.64,
		1.36, 0.00, 0.84,
		1.28, 0.00, 0.92,
		1.20, 0.00, 1.00,
		0.00, 0.00, 0.00,
		0.72, 0.00, 0.00,
		0.84, 0.00, 0.00,
		0.84, 0.00, 0.00,
		0.92, 0.00, 0.00,
		1.00, 0.00, 0.00,
		1.08, 0.00, 0.24,
		1.16, 0.00, 0.48,
		1.16, 0.00, 0.64,
		1.08, 0.00, 0.72,
		1.00, 0.00, 0.80,
		0.00, 0.00, 0.00,
		0.76, 0.00, 0.00,
		0.92, 0.00, 0.00,
		0.92, 0.00, 0.00,
		0.96, 0.00, 0.00,
		1.00, 0.00, 0.00,
		1.04, 0.00, 0.12,
		1.08, 0.00, 0.24,
		1.08, 0.00, 0.32,
		1.04, 0.00, 0.36,
		1.00, 0.00, 0.40,
		0.00, 0.00, 0.00,
		0.80, 0.00, 0.00,
		1.00, 0.00, 0.00,
		1.00, 0.00, 0.00,
		1.00, 0.00, 0.00,
		1.00, 0.00, 0.00,
		1.00, 0.00, 0.00,
		1.00, 0.00, 0.00,
		1.00, 0.00, 0.00,
		1.00, 0.00, 0.00,
		1.00, 0.00, 0.00,
		0.40, 0.40, 0.00,
		1.08, 0.36, 0.00,
		1.16, 0.32, 0.00,
		1.08, 0.24, 0.00,
		1.04, 0.12, 0.00,
		1.00, 0.00, 0.00,
		1.00, 0.00, 0.00,
		1.00, 0.00, 0.00,
		1.00, 0.00, 0.00,
		1.00, 0.00, 0.00,
		1.00, 0.00, 0.00,
		0.80, 0.80, 0.00,
		1.36, 0.72, 0.00,
		1.32, 0.64, 0.00,
		1.16, 0.48, 0.00,
		1.08, 0.24, 0.00,
		1.00, 0.00, 0.00,
		1.00, 0.00, 0.00,
		1.00, 0.00, 0.00,
		1.00, 0.00, 0.00,
		1.00, 0.00, 0.00,
		1.00, 0.00, 0.00,
		1.00, 1.00, 0.00,
		1.48, 0.92, 0.00,
		1.36, 0.84, 0.00,
		1.16, 0.64, 0.00,
		1.08, 0.32, 0.00,
		1.00, 0.00, 0.00,
		1.00, 0.00, 0.00,
		1.00, 0.00, 0.00,
		1.00, 0.00, 0.00,
		1.00, 0.00, 0.00,
		1.00, 0.00, 0.00,
		1.00, 1.00, 0.00,
		1.44, 0.96, 0.00,
		1.28, 0.92, 0.00,
		1.08, 0.72, 0.00,
		1.04, 0.36, 0.00,
		1.00, 0.00, 0.00,
		1.00, 0.00, 0.00,
		1.00, 0.00, 0.00,
		1.00, 0.00, 0.00,
		1.00, 0.00, 0.00,
		1.00, 0.00, 0.00,
		1.00, 1.00, 0.00,
		1.40, 1.00, 0.00,
		1.20, 1.00, 0.00,
		1.00, 0.80, 0.00,
		1.00, 0.40, 0.00,
		1.00, 0.00, 0.00,
		1.00, 0.00, 0.00,
		1.00, 0.00, 0.00,
		1.00, 0.00, 0.00,
		1.00, 0.00, 0.00,
		1.00, 0.00, 0.00,
	},
}

func many(ic, oc int) func([]float64, []uint64) []float64 {
	return func(x []float64, _ []uint64) []float64 {
		nc := len(x) / ic
		y := make([]float64, nc*oc)

		for i, k := 0, 0; i < nc; i++ {
			sum, value := float64(0), float64(0)

			for j := 0; j < ic; j++ {
				sum += x[i*ic+j]
			}

			if sum > float64(ic)/4 {
				value = 1
			}

			for j := 0; j < oc; j++ {
				y[k] = value
				k++
			}
		}

		return y
	}
}
